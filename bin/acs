#!/bin/bash

ANDOCK_CI_VERSION=0.0.11

ANDOCK_CI_PATH="/usr/local/bin/acs"
ANDOCK_CI_PATH_UPDATED="/usr/local/bin/acs.updated"

URL_REPO="https://raw.githubusercontent.com/andock-ci/server"
URL_ANDOCK_CI="${URL_REPO}/master/bin/acs"

# @author Leonid Makarov
# Console colors
red='\033[0;91m'
red_bg='\033[101m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'
CONFIG_DIR="$HOME/.docksal"

export DOCKSAL_VHOST_PROXY_IP="0.0.0.0"

#------------------------------ Help functions --------------------------------
# Ask dialog with an optional message
# @param $1 confirmation message
_ask ()
{
	# Skip checks if not running interactively (not a tty or not on Windows)
	read -p "$1 : " answer
	echo $answer
}

# Yes/no confirmation dialog with an optional message
# @param $1 confirmation message
# @author Leonid Makarov
_confirm ()
{
  # Skip checks if not running interactively (not a tty or not on Windows)
  while true; do
    read -p "$1 [y/n]: " answer
       case "$answer" in
       [Yy]|[Yy][Ee][Ss] )
       break
    ;;
    [Nn]|[Nn][Oo] )
   exit 1
;;
* )
echo 'Please answer yes or no.'
esac
done
}

# Nicely prints command help
# @param $1 command name
# @param $2 description
# @param $3 [optional] command color
# @author Oleksii Chekulaiev
printh ()
{
  local COMMAND_COLUMN_WIDTH=25;
  case "$3" in
  yellow)
    printf "  ${yellow}%-${COMMAND_COLUMN_WIDTH}s${NC}" "$1"
    echo -e "  $2"
  ;;
  green)
    printf "  ${green}%-${COMMAND_COLUMN_WIDTH}s${NC}" "$1"
    echo -e "  $2"
  ;;
  *)
    printf "  %-${COMMAND_COLUMN_WIDTH}s" "$1"
    echo -e "  $2"
  ;;
esac

}

# @author Leonid Makarov
# rewrite previous line
echo-rewrite ()
{
	echo -en "\033[1A"
	echo -e "\033[0K\r""$1"
}
# @author Leonid Makarov
echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }
echo-error () {
	echo -e "${red_bg} ERROR: ${NC} ${red}$1${NC}";
	local unused="$2$3" # avoid IDE warning
	shift
	# Echo other parameters indented. Can be used for error description or suggestions.
	while [[ "$1" != "" ]]; do
		echo -e "         $1";
		shift
	done
}



# Like if_failed but with more strict error
# @author Leonid Makarov
if_failed_error ()
{
  if [ ! $? -eq 0 ]; then
    echo-error "$@"
    exit 1
  fi
}

#------------------------------ HELP --------------------------------
show_help ()
{
  printh "Andock-ci Server command reference" "${ANDOCK_CI_VERSION}" "green"

	echo
	printh "ssh-add" "Add public key to andock-ci user authorized_key file"
  echo

	echo
	printh "version (v, -v)" "Print andock-ci version. [v, -v] - prints short version"
	echo
    printh "self-update" "${yellow}Update andock-ci${NC}" "yellow"
}

#------------------------------ SETUP --------------------------------

update_server()
{
  if [ "$1" = "" ]; then
    if [ "${TRAVIS}" = "true" ]; then
      local pw="andock-ci"
    else
      echo-green "Please enter andock-ci user password..."
      local pw=$(mkpasswd)
    fi

  else
    local pw=$1
    shift
  fi

  echo "---
- hosts: localhost
  connection: local
  any_errors_fatal: True
  gather_facts: false
  tasks:
  - name: Install docksal
    shell: \"curl -fsSL get.docksal.io | sh\"
    become: true
    args:
      creates: \"/usr/local/bin/fin\"
    environment:
      DOCKSAL_VHOST_PROXY_IP: \"0.0.0.0\"

  - name: Create andock-ci user
    user:
      name: andock-ci
      group: docker
      shell: /bin/bash
      generate_ssh_key: yes
      groups: \"sudo\"
      ssh_key_bits: 4096
      password: \"{{ pw }}\"
    become: true

  - name: Allow 'sudo' group to user andock-ci
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%sudo'
      line: '%sudo   ALL=(ALL:ALL) ALL'
    become: true

  - name: Add DOCKSAL_VHOST_PROXY_IP export to /etc/profile
    lineinfile:
      path: /etc/profile
      regexp: '^export DOCKSAL_VHOST_PROXY_IP'
      line: 'export DOCKSAL_VHOST_PROXY_IP=0.0.0.0'
    become: true

  - name: Add DOCKSAL_VHOST_PROXY_IP export to /home/andock-ci/.bashrc
    lineinfile:
      path: /home/andock-ci/.bashrc
      regexp: '^export DOCKSAL_VHOST_PROXY_IP'
      line: 'export DOCKSAL_VHOST_PROXY_IP=0.0.0.0'
    become: true

  - name: Run fin update
    shell: \"sudo su andock-ci export DOCKSAL_VHOST_PROXY_IP=0.0.0.0;sudo su andock-ci fin update\"
    environment:
      DOCKSAL_VHOST_PROXY_IP: \"0.0.0.0\"
    become: true

" > ~/.andock-ci/install.yml

  ansible-playbook --connection=local --extra-vars="pw=$pw" ~/.andock-ci/install.yml

}
# Ansible playbook wrapper to execute andock-ci.fin role
install_server()
{
  echo-green "Installing andock-ci server ..."

  sudo apt-get update
  sudo apt-get install whois -y
  sudo apt-get install build-essential libssl-dev libffi-dev python-dev -y

  set -e
  wget https://bootstrap.pypa.io/get-pip.py
  sudo python get-pip.py
  pip install ansible
  rm get-pip.py

  mkdir -p ~/.andock-ci
  update_server $1
  echo-green "andock-ci server was installed successfully..."
  echo-green "Please copy and paste the following ssh key to your git user. Andock-ci will use it to checkout your target git repository.."
  sudo cat /home/andock-ci/.ssh/id_rsa.pub
}

# Ansible playbook wrapper to add ssh key
ssh_add()
{
  if [ "$1" = "" ]; then
    local key=$(_ask "Please enter your ssh public key.")
  else
    local key=$1
    shift
  fi

  sudo echo "Installing key.. $key"

  ansible-playbook --extra-vars="ssh_key='$key'" /dev/stdin <<END
---
- hosts: localhost
  connection: local
  any_errors_fatal: True
  gather_facts: false

  tasks:
  - block:
    - name: Create .ssh folder
      file:
        path: /home/andock-ci/.ssh
        state: directory
        owner: andock-ci
        group: docker
      become: true


    - name: Set authorized key defining key options
      authorized_key:
        user: andock-ci
        state: present
        key: "command=\"acs _bridge \$SSH_ORIGINAL_COMMAND\" {{ ssh_key }}"
      become: true

END

}
# Based on docksal update script
# @author Leonid Makarov
self_update()
{
  echo-green "Updating andock_ci server ..."
  local new_andock_ci
  new_andock_ci=$(curl -kfsSL "$URL_ANDOCK_CI?r=$RANDOM")
  if_failed_error "andock_ci download failed."

  local new_version=$(echo "$new_andock_ci" | grep "^ANDOCK_CI_VERSION=" | cut -f 2 -d "=")
  if [[ "$new_version" != "$ANDOCK_CI_VERSION" ]]; then
    local current_major_version=$(echo "$ANDOCK_CI_VERSION" | cut -d "." -f 1)
    local new_major_version=$(echo "$new_version" | cut -d "." -f 1)
    if [[ "$current_major_version" != "$new_major_version" ]]; then
      echo -e "${red_bg} WARNING ${NC} ${red}Non-backwards compatible version update${NC}"
      echo -e "Updating from ${yellow}$ANDOCK_CI_VERSION${NC} to ${yellow}$new_version${NC} is not backward compatible."
      _confirm "Continue with the update?"
    fi

    # saving to file
    echo "$new_andock_ci" | sudo tee "$ANDOCK_CI_PATH_UPDATED" > /dev/null
    if_failed_error "Could not write $ANDOCK_CI_PATH_UPDATED"
    sudo chmod +x "$ANDOCK_CI_PATH_UPDATED"
    echo-green "andock-ci $new_version downloaded..."

    # overwrite old andock-ci server
    sudo mv "$ANDOCK_CI_PATH_UPDATED" "$ANDOCK_CI_PATH"
    acs _update-server
  else
    echo-rewrite "Updating andock-ci... $ANDOCK_CI_VERSION ${green}[OK]${NC}"
  fi
}


# Display fin version
# @option --short - Display only the version number
version ()
{
	if [[ $1 == '--short' ]]; then
		echo "$ANDOCK_CI_VERSION"
	else
		echo "andock-ci server (acs) version: $ANDOCK_CI_VERSION"
	fi

}

_bridge ()
{

  local args=$@

  if [ "$1" = "env" ]; then
    export $2;
  fi
  if [ "${LC_ANDOCK_CI_ENV}" != "" ]; then
    local service_name=$(fin @${LC_ANDOCK_CI_ENV} ps | sed -n 's/\(.*\)_cli_1\(.*\)/\1/p')
    docker exec -i "${service_name}_cli_1" bash -c "$@"
  elif [ "$args" != "" ]; then
    eval "$args"
  else
    /bin/bash
  fi

}
#----------------------------------- MAIN -------------------------------------

case "$1" in
  _install-server)
    shift
    install_server
  ;;
  _update-server)
    shift
    update_server
  ;;
  _bridge)
    shift
    _bridge "$@"
  ;;

  self-update)
    shift
    shift
    self_update "$@"
  ;;

  ssh-add)
    shift
    ssh_add "$@"
  ;;
  help|"")
	shift
    show_help
  ;;
  -v | v)
    version --short
  ;;
    version)
	version
  ;;
	*)
		[ ! -f "$command_script" ] && \
			echo-yellow "Unknown command '$*'. See 'acs help' for list of available commands" && \
			exit 1
		shift
		exec "$command_script" "$@"
esac