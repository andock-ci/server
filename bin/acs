#!/bin/bash

ANDOCK_CIS_VERSION=0.0.1

REQUIREMENTS_ANDOCK_CI_SERVER='0.0.1'

ANDOCK_CI_PATH="/usr/local/bin/acs"
ANDOCK_CI_PATH_UPDATED="/usr/local/bin/acs.updated"

URL_REPO="https://raw.githubusercontent.com/andock-ci/server"
URL_ANDOCK_CI="${URL_REPO}/master/bin/acs"


export ANSIBLE_ROLES_PATH="~/.andock-ci/roles"
export ANSIBLE_HOST_KEY_CHECKING=False

# @author Leonid Makarov
# Console colors
red='\033[0;91m'
red_bg='\033[101m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

#------------------------------ Help functions --------------------------------

# Yes/no confirmation dialog with an optional message
# @param $1 confirmation message
# @author Leonid Makarov
_confirm ()
{
  # Skip checks if not running interactively (not a tty or not on Windows)
  while true; do
    read -p "$1 [y/n]: " answer
       case "$answer" in
       [Yy]|[Yy][Ee][Ss] )
       break
    ;;
    [Nn]|[Nn][Oo] )
   exit 1
;;
* )
echo 'Please answer yes or no.'
esac
done
}

# Nicely prints command help
# @param $1 command name
# @param $2 description
# @param $3 [optional] command color
# @author Oleksii Chekulaiev
printh ()
{
  local COMMAND_COLUMN_WIDTH=25;
  case "$3" in
  yellow)
    printf "  ${yellow}%-${COMMAND_COLUMN_WIDTH}s${NC}" "$1"
    echo -e "  $2"
  ;;
  green)
    printf "  ${green}%-${COMMAND_COLUMN_WIDTH}s${NC}" "$1"
    echo -e "  $2"
  ;;
  *)
    printf "  %-${COMMAND_COLUMN_WIDTH}s" "$1"
    echo -e "  $2"
  ;;
esac

}

# @author Leonid Makarov
echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }
echo-error () {
	echo -e "${red_bg} ERROR: ${NC} ${red}$1${NC}";
	local unused="$2$3" # avoid IDE warning
	shift
	# Echo other parameters indented. Can be used for error description or suggestions.
	while [[ "$1" != "" ]]; do
		echo -e "         $1";
		shift
	done
}

# rewrite previous line
echo-rewrite ()
{
	echo -en "\033[1A"
	echo -e "\033[0K\r""$1"
}
echo-rewrite-ok ()
{
	echo-rewrite "$1 ${green}[OK]${NC}"
}


# Like if_failed but with more strict error
# @author Leonid Makarov
if_failed_error ()
{
  if [ ! $? -eq 0 ]; then
    echo-error "$@"
    exit 1
  fi
}

#------------------------------ HELP --------------------------------
show_help ()
{
    printh "Andock-ci Server command reference" "${ANDOCK_CIS_VERSION}" "green"

	echo
	printh "ssh-add" "Add public key to andock-ci user authorized_key file"
    echo

	echo
	printh "version (v, -v)" "Print andock-ci version. [v, -v] - prints short version"
	echo
    printh "self-update" "${yellow}Update andock-ci${NC}" "yellow"
}

#------------------------------ SETUP --------------------------------

# Ansible playbook wrapper to execute andock-ci.fin role
install_server()
{
#ansible-galaxy install andock-ci.server --force
shift
ansible-playbook --tags=install /dev/stdin <<END
---
- hosts: localhost
  roles:
    - { role: andock-ci.server }

END

}

# Ansible playbook wrapper to add ssh key
ssh_add()
{
local key=$1
shift
echo "Installing key.. $key"

ansible-playbook --tags "ssh_add" --extra-vars="ssh_key='$key'" -vvv /dev/stdin <<END
---
- hosts: localhost
  connection: local
  any_errors_fatal: True
  vars_prompt:
    - name: "ssh_key"
      prompt: "Public key?"
  roles:
    - { role: andock-ci.server }

END

}
# Based on docksal update script
# @author Leonid Makarov
self_update()
{
  echo-green "Updating andock_ci server ..."
  local new_andock_ci
  new_andock_ci=$(curl -kfsSL "$URL_ANDOCK_CI?r=$RANDOM")
  if_failed_error "andock_ci download failed."

# Check if fin update is required and whether it is a major version
  local new_version=$(echo "$new_andock_ci" | grep "^ANDOCK_CI_VERSION=" | cut -f 2 -d "=")
  if [[ "$new_version" != "$ANDOCK_CI_VERSION" ]]; then
  local current_major_version=$(echo "$ANDOCK_CI_VERSION" | cut -d "." -f 1)
  local new_major_version=$(echo "$new_version" | cut -d "." -f 1)
  if [[ "$current_major_version" != "$new_major_version" ]]; then
    echo -e "${red_bg} WARNING ${NC} ${red}Non-backwards compatible version update${NC}"
    echo -e "Updating from ${yellow}$ANDOCK_CI_VERSION${NC} to ${yellow}$new_version${NC} is not backward compatible."
    _confirm "Continue with the update?"
  fi

# saving to file
echo "$new_andock_ci" | sudo tee "$ANDOCK_CI_PATH_UPDATED" > /dev/null
if_failed_error "Could not write $ANDOCK_CI_PATH_UPDATED"
sudo chmod +x "$ANDOCK_CI_PATH_UPDATED"
echo-green "andock-ci $new_version downloaded..."

# overwrite old fin
sudo mv "$ANDOCK_CI_PATH_UPDATED" "$ANDOCK_CI_PATH"
install
exit
else
echo-rewrite "Updating andock-ci... $ANDOCK_CI_VERSION ${green}[OK]${NC}"
fi
}


# Display fin version
# @option --short - Display only the version number
version ()
{
	if [[ $1 == '--short' ]]; then
		echo "$ANDOCK_CI_VERSION"
	else
		echo "andock-ci server (acs) version: $ANDOCK_CIS_VERSION"
		echo "Roles:"
		echo "andock-ci.server: $REQUIREMENTS_ANDOCK_CI_SERVER"
	fi

}

#----------------------------------- MAIN -------------------------------------

case "$1" in
  _install-server)
    shift
    install_server
  ;;

  self-update)
    shift
    shift
    self_update "$@"
  ;;

  ssh-add)
    shift
    ssh_add "$@"
  ;;
  help|"")
	shift
    show_help
  ;;
  -v | v)
    version --short
  ;;
    version)
	version
  ;;
	*)
		[ ! -f "$command_script" ] && \
			echo-yellow "Unknown command '$*'. See 'acs help' for list of available commands" && \
			exit 1
		shift
		exec "$command_script" "$@"
esac

